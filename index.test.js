import assert from 'node:assert';
import { BigNumber } from './index.js';

// console.log('Testing ArbitraryDecimal, simple cases...');
// assert.strictEqual(
//   new BigNumber(
//     '1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890').toString(),
//   '1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890');

// assert.strictEqual(
//   new BigNumber('1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890').add(new BigNumber('1')).toString(),
//   '1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891');

// assert.strictEqual(
//   new BigNumber('1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890').subtract(new BigNumber('1')).toString(),
//   '1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567889');


// console.log('Testing decimal cases...');
// // 1. Create arbitrary decimals
// const num1 = new BigNumber("123.456");
// const num2 = new BigNumber("78.9");

// // 2. Add
// const sum = num1.add(num2);
// assert.strictEqual(sum.toString(), '202.356');

// // 3. Subtract
// const difference = num1.subtract(num2);
// assert.strictEqual(difference.toString(), '44.556');

// // 4. Multiply
// const product = num1.multiply(num2);
// assert.strictEqual(product.toString(), '9740.6784');

// // 5. Divide with precision 1.5647148289
// const quotient = num1.divide(num2, 5); // up to 5 decimal places
// assert.strictEqual(quotient.toString(), '1.56471');


// const quotient2 = num1.divide(num2, 10); // up to 5 decimal places
// assert.strictEqual(quotient2.toString(), '1.5647148289');

// const pow = num1.pow(new BigNumber('2'));
// assert.strictEqual(pow.toString(), '15241.383936');
// const start = performance.now();
// const ln2 = BigNumber.ln2(1000);
// const end = performance.now();
// const time = end - start;
// console.log(`Time to compute ln2 first time: ${time}ms`);
// const ln2Actual1000 = '0.693147180559945309417232121458176' +
//  '568075500134360255254120680009493393621969694715605863326'+
//  '9964186875420014810205706857336855202357581305570326707516'+ 
//  '35075961930727570828371435190307038623891673471123350115364'+
//  '497955239120475172681574932065155524734139525882950453007095'+
//  '326366642654104239157814952043740430385500801944170641671518'+
//  '644712839968171784546957026271631064546150257207402481637773'+
//  '389638550695260668341137273873722928956493547025762652098859'+
//  '693201965058554764703306793654432547632744951250406069438147'+
//  '104689946506220167720424524529612687946546193165174681392672'+
//  '504103802546259656869144192871608293803172714367782654877566'+
//  '485085674077648451464439940461422603193096735402574446070308'+
//  '096085047486638523138181676751438667476647890881437141985494'+
//  '231519973548803751658612753529166100071053558249879414729509'+
//  '293113897155998205654392871700072180857610252368892132449713'+
//  '893203784393530887748259701715591070882368362758984258918535'+
//  '302436342143670611892367891923723146723217205340164925687274'+
//  '7782344535348'
// assert.strictEqual(ln2.toString(), ln2Actual1000);
// const start2 = performance.now();
// const ln2_second = BigNumber.ln2(1000);
// const end2 = performance.now();
// const time2 = end2 - start2;
// console.log(`Time to compute ln2 second time: ${time2}ms`);
// assert.strictEqual(ln2_second.toString(), ln2.toString());
// // Second one should be way faster
// assert(time2 < time);

const truePi1000 = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989';
const pi = BigNumber.pi(1000);
assert.strictEqual(pi.toString(), truePi1000.toString());

console.log('All tests passed!');
